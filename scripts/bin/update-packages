#!/usr/bin/env bash
# shellcheck source-path=/data/data/com.termux/files/home/termux-packages
set -u

# Following variables should be set in environment outside of this script.
# Build updated packages.
: "${BUILD_PACKAGES:=false}"
# Commit changes to Git.
: "${GIT_COMMIT_PACKAGES:=false}"
# Push changes to remote.
: "${GIT_PUSH_PACKAGES:=false}"

export TERMUX_PKG_UPDATE_METHOD=""         # Which method to use for updating? (repology, github or gitlab)
export TERMUX_PKG_UPDATE_TAG_TYPE=""       # Whether to use latest-release-tag or newest-tag.
export TERMUX_GITLAB_API_HOST="gitlab.com" # Default host for gitlab-ci.
export TERMUX_PKG_AUTO_UPDATE=false        # Whether to auto-update or not. Disabled by default.
export TERMUX_PKG_UPDATE_VERSION_REGEXP="" # Regexp to extract version.
export TERMUX_REPOLOGY_DATA_FILE
TERMUX_REPOLOGY_DATA_FILE="$(mktemp -t termux-repology.XXXXXX)" # File to store repology data.

export TERMUX_SCRIPTDIR
TERMUX_SCRIPTDIR="$(realpath "$(dirname "$0")/../..")" # Script directory.

# Define few more variables used by scripts.
# shellcheck source=scripts/properties.sh
. "${TERMUX_SCRIPTDIR}/scripts/properties.sh"

# Utility function to write error message to stderr.
# shellcheck source=scripts/updates/utils/termux_error_exit.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/utils/termux_error_exit.sh

# Utility function to write updated version to build.sh.
# shellcheck source=scripts/updates/utils/termux_pkg_upgrade_version.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/utils/termux_pkg_upgrade_version.sh

# Utility function to check if package needs to be updated, based on version comparison.
# shellcheck source=scripts/updates/utils/termux_pkg_is_update_needed.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/utils/termux_pkg_is_update_needed.sh

# Wrapper around github api to get latest release or newest tag.
# shellcheck source=scripts/updates/api/termux_github_api_get_tag.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/api/termux_github_api_get_tag.sh

# Wrapper around gitlab api to get latest release or newest tag.
# shellcheck source=scripts/updates/api/termux_gitlab_api_get_tag.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/api/termux_gitlab_api_get_tag.sh

# Function to get latest version of a package as per repology.
# shellcheck source=scripts/updates/api/termux_repology_api_get_latest_version.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/api/termux_repology_api_get_latest_version.sh

# Default auto update script for packages hosted on github.com. Should not be overrided by build.sh.
# To use custom algorithm, one should override termux_pkg_auto_update().
# shellcheck source=scripts/updates/internal/termux_github_auto_update.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/internal/termux_github_auto_update.sh

# Default auto update script for packages hosted on hosts using gitlab-ci. Should not be overrided by build.sh.
# To use custom algorithm, one should override termux_pkg_auto_update().
# shellcheck source=scripts/updates/internal/termux_gitlab_auto_update.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/internal/termux_gitlab_auto_update.sh

# Default auto update script for rest packages. Should not be overrided by build.sh.
# To use custom algorithm, one should override termux_pkg_auto_update().
# shellcheck source=scripts/updates/internal/termux_repology_auto_update.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/internal/termux_repology_auto_update.sh

# Main script to:
# - by default, decide which update method to use,
# - but can be overrided by build.sh to use custom update method.
# - For example: see neovim-nightly's build.sh.
# shellcheck source=scripts/updates/termux_pkg_auto_update.sh
. "${TERMUX_SCRIPTDIR}"/scripts/updates/termux_pkg_auto_update.sh

_update() {
	export TERMUX_PKG_NAME
	TERMUX_PKG_NAME="$(basename "$1")"
	export TERMUX_PKG_BUILDER_DIR
	TERMUX_PKG_BUILDER_DIR="$(realpath "$1")" # Directory containing build.sh.
	# Avoid:
	# - ending on errors such as $(which prog), where prog is not installed.
	# - error on unbound variable.
	#
	# Variables used by auto update script should be covered by above variables and properties.sh.
	set +e +u
	# shellcheck source=/dev/null
	. "${pkg_dir}"/build.sh 2>/dev/null
	set -e -u

	IFS="," read -r -a BLACKLISTED_ARCH <<<"${TERMUX_PKG_BLACKLISTED_ARCHES:-}"
	export TERMUX_ARCH="" # Arch to test updates.
	for arch in aarch64 arm i686 x86_64; do
		# shellcheck disable=SC2076
		if [[ ! " ${BLACKLISTED_ARCH[*]} " =~ " ${arch} " ]]; then
			TERMUX_ARCH="${arch}"
			break
		fi
	done

	# Only update if auto update is enabled.
	if [[ "${TERMUX_PKG_AUTO_UPDATE}" == "true" ]]; then
		echo # Newline.
		echo "INFO: Updating ${TERMUX_PKG_NAME} [Current version: ${TERMUX_PKG_VERSION}]..."
		termux_pkg_auto_update
	fi
}

declare -A _FAILED_UPDATES=()

_run_update() {
	local pkg_dir="$1"
	#  Check if this `pkg_dir` has a `build.sh` file.
	if [[ ! -f "${pkg_dir}/build.sh" ]]; then
		# Fail if detected a non-package directory.
		termux_error_exit "ERROR: directory '${pkg_dir}' is not a package."
	fi
	# Run each package update in separate process since we include their environment variables.
	local output=""
	{
		output=$(
			set -euo pipefail
			_update "${pkg_dir}" 2>&1 | tee /dev/fd/3 # fd 3 is used to output to stdout as well.
			exit "${PIPESTATUS[0]}"                   # Return exit code of _update.
		)
	} 3>&1
	# shellcheck disable=SC2181
	if [[ $? -ne 0 ]]; then
		_FAILED_UPDATES["$(basename "${pkg_dir}")"]="${output}"
	fi
}

_gh_issue() {
	local pkg_name="$1"
	local header="$2"
	local issue_number="${3:-}"
	local max_comment_length=65536 # Max comment length in one request.

	local body="$(
		cat <<-EOF
			${header}

			Here's the output of the update script:

			<details><summary>Output log</summary>
			<pre lang="bash">
				${_FAILED_UPDATES[$pkg_name]}
			</pre>
			</details>

			Thanks!

			<i>
				Run ID: <a href="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}">${GITHUB_RUN_ID}</a><br>
				Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")<br>
			</i>
		EOF
	)"

	if [[ -z "${issue_number}" ]]; then
		issue_number="$(
			gh issue create \
				--label "auto update failing" --label "bot" \
				--title "Auto update failing for ${pkg_name}" \
				--body "" |       # Body is empty, since we will append the logs later.
				grep -oE '[0-9]+' # Last component in url returned is issue number.
		)"
	fi

	while true; do
		local comment_part="${body:0:$max_comment_length}"
		body="${body:$max_comment_length}"
		sleep 5 # Otherwise we might get rate limited.
		gh issue edit "$issue_number" \
			--body-file - <<<"$(gh issue view "$issue_number" --json body --jq '.body')<br>$comment_part"
		# NOTE: we use --body-file instead of --body to avoid shell error 'argument list too long'.
		if [[ -z "${body}" ]]; then
			break
		fi
	done
}

_handle_failure() {
	if [[ "${GITHUB_ACTIONS:-}" == "true" ]]; then
		echo # Newline.
		echo "INFO: Creating/Updating issue for failed updates."
		for pkg_name in "${!_FAILED_UPDATES[@]}"; do
			local issue_number
			issue_number=$(
				gh issue list \
					--label "auto update failing" --label "bot" \
					--state open \
					--search "Auto update failing for ${pkg_name} in:title type:issue" \
					--json number --jq '.[0].number' # Assume only one issue (and it should be too).
			)
			local header
			if [[ -z "${issue_number}" ]]; then
				header="$(
					cat <<-EOF
						Hi, I'm Termux ðŸ¤–.

						I'm here to help you update your Termux packages.

						I've tried to update the ${pkg_name} package, but it failed. 
					EOF
				)"
			else
				header="<h4>EDIT:</h4><br>It failed again."
			fi
			_gh_issue "${pkg_name}" "${header}" ${issue_number}
		done

	else
		echo # Newline.
		echo "==> Failed updates:"
		local count=0
		for pkg_name in "${!_FAILED_UPDATES[@]}"; do
			count=$((count + 1))
			echo "${count}. ${pkg_name}"
		done
		exit 1
	fi
}

main() {
	echo "INFO: Running update for: $*"

	if [[ "$1" == "@all" ]]; then
		for repo_dir in $(jq --raw-output 'keys | .[]' "${TERMUX_SCRIPTDIR}/repo.json"); do
			for pkg_dir in "${repo_dir}"/*; do
				_run_update "${pkg_dir}"
			done
		done
	else
		for pkg in "$@"; do
			if [ ! -d "${pkg}" ]; then # If only package name is given, try to find it's directory.
				for repo_dir in $(jq --raw-output 'keys | .[]' "${TERMUX_SCRIPTDIR}/repo.json"); do
					if [ -d "${repo_dir}/${pkg}" ]; then
						pkg="${repo_dir}/${pkg}"
						break
					fi
				done
			fi
			_run_update "${pkg}" # Here, `pkg` is a directory.
		done
	fi
	if [[ ${#_FAILED_UPDATES[@]} -gt 0 ]]; then
		_handle_failure
	fi
}

main "$@"
