name: Packages

on:
  push:
    branches:
    - master
    paths:
    - 'packages/**'
    - 'root-packages/**'
    - 'x11-packages/**'
    - 'packages-vh-override/**'
    - 'root-packages-vh-override/**'
    - 'x11-packages-vh-override/**'
  pull_request:
    paths:
    - 'packages/**'
    - 'root-packages/**'
    - 'x11-packages/**'
    - 'packages-vh-override/**'
    - 'root-vh-override/**'
    - 'x11-vh-override/**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_HOME: "/opt/termux/android-sdk"
      NDK: "/opt/termux/android-ndk"
    strategy:
      matrix:
        target_arch: [aarch64, arm, i686, x86_64]
    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1000
    - name: Gather build summary
      run: |
        #################################
        #### calculate CHANGED_FILES ####
        #################################
        BASE_COMMIT=$(jq --raw-output .pull_request.base.sha "$GITHUB_EVENT_PATH")
        OLD_COMMIT=$(jq --raw-output .commits[0].id "$GITHUB_EVENT_PATH")
        HEAD_COMMIT=$(jq --raw-output .commits[-1].id "$GITHUB_EVENT_PATH")
        if [[ "$(git log --format="%B" -n 1 "HEAD")" =~ \[PrevCommit:([0-9a-fA-F]+)\] ]]; then
          echo "Set basecommit from gitlog"
          BASE_COMMIT=${BASH_REMATCH[1]}
        fi
        if [ "$BASE_COMMIT" = "null" ]; then
          if [ "$OLD_COMMIT" = "$HEAD_COMMIT" ]; then
            # Single-commit push.
            echo "Processing commit: ${HEAD_COMMIT}"
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r "${HEAD_COMMIT}")
          else
            # Multi-commit push.
            OLD_COMMIT="${OLD_COMMIT}~1"
            echo "Processing commit range: ${OLD_COMMIT}..${HEAD_COMMIT}"
            CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r "${OLD_COMMIT}" "${HEAD_COMMIT}")
          fi
        else
          # Pull requests.
          echo "Processing pull request #$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH"): ${BASE_COMMIT}..HEAD"
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r "${BASE_COMMIT}" "HEAD")
        fi

        #################################
        #### make build dirs         ####
        #################################
        mkdir -p ./artifacts ./debs
        touch ./debs/.placeholder

        #################################
        #### edge cases              ####
        #################################
        # Process tag '%ci:no-build' that may be added as line to commit message.
        # Forces CI to cancel current build with status 'passed'.
        if grep -qiP '^\s*%ci:no-build\s*$' <(git log --format="%B" -n 1 "HEAD"); then
          tar cf artifacts/debs-${{ matrix.target_arch }}.tar debs
          echo "[!] Force exiting as tag '%ci:no-build' was applied to HEAD commit message."
          exit 0
        fi
        # Build local Docker image if setup scripts were changed.
        # Useful for pull requests submitting changes for both build environment and packages.
        if grep -qP '^scripts/(Dockerfile|setup-ubuntu\.sh)$' <<< "$CHANGED_FILES"; then
          echo "Detected changes for environment setup scripts. Building custom Docker image now."
          cd ./scripts
          docker build -t vanhoavn/vheditor-package-builder:latest .
          cd ..
        fi
        #############################################
        #### create {deleted,built}_packages.txt ####
        #############################################
        for repo_path in $(jq --raw-output 'keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)
          # Parse changed files and identify new packages and deleted packages.
          # Create lists of those packages that will be passed to upload job for
          # further processing.
          while read -r file; do
            if ! [[ $file == ${repo_path}/* ]]; then
              # This file does not belong to a package, so ignore it
              continue
            fi
            if [[ $file =~ ^${repo_path}/([a-z0-9+-]*)/([a-z0-9+-]*).subpackage.sh$ ]]; then
              # A subpackage was modified, check if it was deleted or just updated
              pkg=${BASH_REMATCH[1]}
              subpkg=${BASH_REMATCH[2]}
              if [ ! -f "${repo_path}/${pkg}/${subpkg}.subpackage.sh" ]; then
                echo "$subpkg" >> ./deleted_${repo}_packages.txt
              fi
            elif [[ $file =~ ^${repo_path}/([a-z0-9+-]*)/.*$ ]]; then
              # package, check if it was deleted or updated
              pkg=${BASH_REMATCH[1]}
              if [ ! -d "${repo_path}/${pkg}" ]; then
                echo "$pkg" >> ./deleted_${repo}_packages.txt
              else
                echo "$pkg" >> ./built_${repo}_packages.txt
                # If there are subpackages we want to create a list of those
                # as well
                for file in $(find "${repo_path}/${pkg}/" -maxdepth 1 -type f -name \*.subpackage.sh | sort); do
                  echo "$(basename "${file%%.subpackage.sh}")" >> ./built_${repo}_subpackages.txt
                done
              fi
            fi
          done<<<${CHANGED_FILES}
          while read -r file; do
            if ! [[ $file == ${repo_path}-vh-override/* ]]; then
              continue
            fi
            if [[ $file =~ ^${repo_path}-vh-override/([.a-z0-9+-]*)/([.a-z0-9+-]*).subpackage.sh$ ]]; then
              true
            elif [[ $file =~ ^${repo_path}-vh-override/([.a-z0-9+-]*)/.*$ ]]; then
              # package, check if it was deleted or updated
              pkg=${BASH_REMATCH[1]}
              if [ ! -d "${repo_path}/${pkg}" ]; then
                true
              else
                echo "$pkg" >> ./built_${repo}_packages.txt
                for file in $(find "${repo_path}-vh-override/${pkg}/" -maxdepth 1 -type f -name \*.subpackage.sh | sort); do
                  echo "$(basename "${file%%.subpackage.sh}")" >> ./built_${repo}_subpackages.txt
                done
                for file in $(find "${repo_path}/${pkg}/" -maxdepth 1 -type f -name \*.subpackage.sh | sort); do
                  echo "$(basename "${file%%.subpackage.sh}")" >> ./built_${repo}_subpackages.txt
                done
              fi
            fi
          done<<<${CHANGED_FILES}
        done

        #############################################
        #### Post processing packages list       ####
        #############################################
        for repo in $(jq --raw-output '.[].name' repo.json); do
          # Fix so that lists do not contain duplicates
          if [ -f ./built_${repo}_packages.txt ]; then
            uniq ./built_${repo}_packages.txt > ./built_${repo}_packages.txt.tmp
            mv ./built_${repo}_packages.txt.tmp ./built_${repo}_packages.txt
          fi
          if [ -f ./built_${repo}_subpackages.txt ]; then
            uniq ./built_${repo}_subpackages.txt > ./built_${repo}_subpackages.txt.tmp
            mv ./built_${repo}_subpackages.txt.tmp ./built_${repo}_subpackages.txt
          fi
          if [ -f ./deleted_${repo}_packages.txt ]; then
            uniq ./deleted_${repo}_packages.txt > ./deleted_${repo}_packages.txt.tmp
            mv ./deleted_${repo}_packages.txt.tmp ./deleted_${repo}_packages.txt
          fi
        done
    - name: Free additional disk space on host
      run: |
        if grep -q '^clvk$\|^dart$\|^rust$\|^rustc-nightly$' ./built_termux-main_packages.txt; then
          echo "Free additional disk space on host"
          sudo apt purge -yq $(dpkg -l | grep '^ii' | awk '{ print $2 }' | grep -P '(cabal-|dotnet-|ghc-|libmono|php)') \
            liblldb-6.0 libllvm6.0:amd64 mono-runtime-common monodoc-manual powershell ruby
          sudo apt autoremove -yq
          sudo rm -rf /opt/hostedtoolcache /usr/local /usr/share/dotnet /usr/share/swift
        fi
    - name: Patch
      run: ./patch-repo.sh
    - name: Build
      run: |
        declare -a packages
        echo > ./built_packages.txt
        for repo_path in $(jq --raw-output 'keys | .[]' repo.json); do
          repo=$(jq --raw-output '.["'${repo_path}'"].name' repo.json)
          if [ -f ./built_${repo}_packages.txt ]; then
            packages="$packages $(cat ./built_${repo}_packages.txt)"
            cat ./built_${repo}_packages.txt >> ./built_packages.txt
          fi
        done

        if [ ! -z "$packages" ]; then
          TERMUX_BUILDER_IMAGE_NAME=vanhoavn/vheditor-package-builder ./scripts/run-docker.sh bash -c "bash ./vh-build-package-wrapper.sh -I -a ${{ matrix.target_arch }}"
        fi

    - name: Generate build artifacts
      if: always()
      run: |
        mkdir -p debs
        test -d termux-packages/output && mv termux-packages/output/* ./output/

        for repo in $(jq --raw-output '.[].name' repo.json); do
          # Put package lists into directory with *.deb files so they will be transferred to
          # upload job.
          test -f ./built_${repo}_packages.txt && mv ./built_${repo}_packages.txt ./debs/
          test -f ./built_${repo}_subpackages.txt && cat ./built_${repo}_subpackages.txt >> ./debs/built_${repo}_packages.txt \
            && rm ./built_${repo}_subpackages.txt
          test -f ./deleted_${repo}_packages.txt && mv ./deleted_${repo}_packages.txt ./debs/
          # Move only debs from built_packages into debs/ folder before
          # creating an archive.
          while read -r pkg; do
            # Match both $pkg.deb and $pkg-static.deb.
            find output \( -name "$pkg_*.deb" -o -name "$pkg-static_*.deb" \) -type f -print0 | xargs -0r mv -t debs/
          done < <(cat ./debs/built_${repo}_packages.txt)
        done
        # Files containing certain symbols (e.g. ":") will cause failure in actions/upload-artifact.
        # Archiving *.deb files in a tarball to avoid issues with uploading.
        tar cf artifacts/debs-${{ matrix.target_arch }}-${{ github.sha }}.tar debs
    - name: Checksums for built *.deb files
      if: always()
      run: |
        find debs -type f -name "*.deb" -exec sha256sum "{}" \; | sort -k2
    - name: Store *.deb files
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: termux-packages-${{ github.sha }}
        path: ./artifacts
  upload:
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Clone repository
      uses: actions/checkout@v2
    - name: Get *.deb files
      uses: actions/download-artifact@v2
      with:
        name: termux-packages-${{ github.sha }}
        path: ./
    - name: Upload
      env:
        REPOSITORY_NAME: termux-main
        REPOSITORY_DISTRIBUTION: stable
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.KNOWN_HOST_ENTRY }}" >> ~/.ssh/known_hosts
        ssh-agent -a $SSH_AUTH_SOCK
        ssh-add - <<< "${{ secrets.SSHKEY }}"
    - name: Upload to vhn.vn
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        # Zip the deb archives to only do one transfer to the repo.
        # This makes it easier to parse it, we can run one update job
        # instead of one for each arch on the server.
        archive="termux-packages-${{ github.sha }}.zip"
        deb_archives=$(find -maxdepth 1 -name "debs-*-${{ github.sha }}.tar")
        
        if [ -z "$deb_archives" ]; then
          echo "No archives to upload found"
          exit 0
        fi
        zip $archive ${deb_archives}
        sftp -P ${{ secrets.PORT }} ${{ secrets.USER }}@vhn.vn <<EOF
          put $archive debs/
        EOF
